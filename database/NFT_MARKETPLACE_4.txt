// The list_with_fixed_price_internal function is implemented to create an internal fixed-price listing for an NFT in the marketplace. It handles the creation of the listing and the associated fixed price, transfers the NFT to an escrow account, and updates the seller's listings and the marketplace's list of sellers.
// To implement list_with_fixed_price_internal, we need:
// Parameters
// seller: A reference to the signer who owns the object being listed for sale.
// object: The NFT object that is being listed.
// price: The fixed price at which the NFT is being listed for sale.
// Process:
// Create Object: A new object is created with a reference to the seller's address using object::create_object.
// Generate Transfer Reference: A transfer reference is generated for the created object using object::generate_transfer_ref.
// Disable Ungated Transfer: The function disables ungated transfer of the object using object::disable_ungated_transfer to ensure only the marketplace can manage the transfer.
// Generate Signer: A signer specific to the listing is generated using object::generate_signer.
// Create Listing: A Listing struct is created with the object, seller's address, a delete reference, and an extend reference.
// Create Fixed Price Listing: A FixedPriceListing struct is created with the specified price.
// Move to Storage: Both the Listing and FixedPriceListing structs are moved to the appropriate storage locations managed by the listing signer.
// Transfer Object: The NFT is transferred from the seller to the listing signer's address, effectively placing it in escrow.
// Retrieve Listing: The listing object is retrieved using object::object_from_constructor_ref.
// Update Seller Listings: The seller's listings are updated to include the new listing. If the seller doesn't have existing listings, a new SellerListings struct is created.
// Update Marketplace Sellers: The marketplace's list of sellers is updated to include the seller if they are not already listed. If the Sellers struct doesn't exist, it is created.
```
public(friend) fun list_with_fixed_price_internal<CoinType>(
    seller: &signer,
    object: object::Object<object::ObjectCore>,
    price: u64,
): object::Object<Listing> acquires SellerListings, Sellers, MarketplaceSigner {
    let constructor_ref = object::create_object(signer::address_of(seller));

    let transfer_ref = object::generate_transfer_ref(&constructor_ref);
    object::disable_ungated_transfer(&transfer_ref);

    let listing_signer = object::generate_signer(&constructor_ref);

    let listing = Listing {
        object,
        seller: signer::address_of(seller),
        delete_ref: object::generate_delete_ref(&constructor_ref),
        extend_ref: object::generate_extend_ref(&constructor_ref),
    };
    let fixed_price_listing = FixedPriceListing<CoinType> {
        price,
    };
    move_to(&listing_signer, listing);
    move_to(&listing_signer, fixed_price_listing);

    object::transfer(seller, object, signer::address_of(&listing_signer));

    let listing = object::object_from_constructor_ref(&constructor_ref);

    if (exists<SellerListings>(signer::address_of(seller))) {
        let seller_listings = borrow_global_mut<SellerListings>(signer::address_of(seller));
        smart_vector::push_back(&mut seller_listings.listings, object::object_address(&listing));
    } else {
        let seller_listings = SellerListings {
            listings: smart_vector::new(),
        };
        smart_vector::push_back(&mut seller_listings.listings, object::object_address(&listing));
        move_to(seller, seller_listings);
    };
    if (exists<Sellers>(get_marketplace_signer_addr())) {
        let sellers = borrow_global_mut<Sellers>(get_marketplace_signer_addr());
        if (!smart_vector::contains(&sellers.addresses, &signer::address_of(seller))) {
            smart_vector::push_back(&mut sellers.addresses, signer::address_of(seller));
        }
    } else {
        let sellers = Sellers {
            addresses: smart_vector::new(),
        };
        smart_vector::push_back(&mut sellers.addresses, signer::address_of(seller));
        move_to(&get_marketplace_signer(get_marketplace_signer_addr()), sellers);
    };

    listing
}
```