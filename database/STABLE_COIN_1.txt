// Structs
// Manages different roles within the stablecoin contract
// master_minter: The primary account responsible for minting new tokens.
// minters: A list of addresses that are authorized to mint tokens.
// pauser: The account that can pause the contract.
// denylister: The account that can manage the denylist.
```
#[resource_group_member(group = aptos_framework::object::ObjectGroup)]
struct Roles has key {
    master_minter: address,
    minters: vector<address>,
    pauser: address,
    denylister: address,
}
```
// Holds references to different management functions.
// Fields:
// extend_ref: Reference to the extension management.
// mint_ref: Reference to the minting management.
// burn_ref: Reference to the burning management.
// transfer_ref: Reference to the transfer management.
```
#[resource_group_member(group = aptos_framework::object::ObjectGroup)]
struct Management has key {
    extend_ref: ExtendRef,
    mint_ref: MintRef,
    burn_ref: BurnRef,
    transfer_ref: TransferRef,
}
```
// Keeps track of the contract's state.
// Fields:
// paused: Indicates whether the contract is paused.
// denylist: A table that keeps track of addresses that are denied from certain actions.
```
#[resource_group_member(group = aptos_framework::object::ObjectGroup)]
struct State has key {
    paused: bool,
    denylist: SmartTable<address, bool>,
}
```
// Manages approvals for spending tokens.
// Fields:
// owner: The address of the token owner.
// nonce: A unique number to prevent replay attacks.
// chain_id: The ID of the blockchain.
// spender: The address authorized to spend the tokens.
// amount: The amount of tokens approved for spending.
```
struct Approval has drop {
    owner: address,
    nonce: u64,
    chain_id: u8,
    spender: address,
    amount: u64,
}
```

// Logs minting events.
// Fields:
// minter: The address that minted the tokens.
// to: The address that received the minted tokens.
// amount: The amount of tokens minted.
```
```
#[event]
struct Mint has drop, store {
    minter: address,
    to: address,
    amount: u64,
}
```
// Logs burning events.
// Fields:
// minter: The address that burned the tokens.
// from: The address from which the tokens were burned.
// store: The object representing the fungible store of the tokens.
// amount: The amount of tokens burned.
```
#[event]
struct Burn has drop, store {
    minter: address,
    from: address,
    store: Object<FungibleStore>,
    amount: u64,
}
```
// Logs pause events.
// Fields:
// pauser: The address that paused or unpaused the contract.
// paused: Indicates whether the contract is paused.
```
#[event]
struct Pause has drop, store {
    pauser: address,
    paused: bool,
}
```
// Logs denylist events.
// Fields:
// denylister: The address that added or removed an account from the denylist.
// account: The account that was added or removed from the denylist.
```
#[event]
struct Denylist has drop, store {
    denylister: address,
    account: address,
}```